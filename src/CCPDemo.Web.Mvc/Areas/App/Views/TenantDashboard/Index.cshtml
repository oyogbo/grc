@using CCPDemo.Authorization
@using CCPDemo.Web.Areas.App.Models.Risks
@using CCPDemo.Web.Areas.App.Startup
@model RiskViewModel
@{
	var dbList = ViewBag.dbList;
}

@section Styles {

	<link rel="stylesheet" href="https://cdn.datatables.net/1.10.23/css/jquery.dataTables.min.css" />
}

@section Scripts {
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
	<script>
		var xValues = ["Critical", "Very High", "High", "Medium"];
		var yValues = [@Model.Critical, @Model.VeryHigh, @Model.High, @Model.Medium];
		var barColors = [
			"#b91d47",
			"#00aba9",
			"#2b5797",
			"#e8c3b9",
			"#52ffb9"
		];

		new Chart("riskProfile", {
			type: "pie",
			data: {
				labels: xValues,
				datasets: [{
					backgroundColor: barColors,
					data: yValues
				}]
			},
			options: {
				events: false,
				title: {
					display: true,
					text: "CATEGORIZATION OF RISK"
				},
				legend: {
					position: 'left'
				},
				animation: {
                duration: 500,
                easing: "easeOutQuart",
                onComplete: function () {
                    var ctx = this.chart.ctx;
                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontFamily, 'normal', Chart.defaults.global.defaultFontFamily);
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';


					

					this.data.datasets.forEach(function (dataset) {

                        for (var i = 0; i < dataset.data.length; i++) {
                            var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model,
                                total = dataset._meta[Object.keys(dataset._meta)[0]].total,
                                mid_radius = model.innerRadius + (model.outerRadius - model.innerRadius) / 2,
                                start_angle = model.startAngle,
                                end_angle = model.endAngle,
                                mid_angle = start_angle + (end_angle - start_angle) / 2;

                            var x = mid_radius * Math.cos(mid_angle);
                            var y = mid_radius * Math.sin(mid_angle);

							ctx.fillStyle = '#fff';
                            

                            var percent = String(Math.round(dataset.data[i] / total * 100)) + "%";
                            //ctx.fillText(dataset.data[i], model.x + x, model.y + y);
                            // Display percent in another line, line break doesn't work for fillText
                            ctx.fillText(percent, model.x + x, model.y + y + 15);
                        }
                    });
                }
            }
			}
		});


		console.log('Path')
		console.log(abp.appPath)
		
	</script>
	<script>
		$(document).ready(function(){
			var _$riskRatingTable = $('#RisksRatingTable');
			var _risksService = abp.services.app.risks;


			var dataTable1 = _$riskRatingTable.DataTable({
				paging: true,
				serverSide: true,
				processing: true,
				searching: true,
				scrollX: true,
				listAction: {
					ajaxFunction: _risksService.getRiskRatingByDepartment
				},
				columnDefs: [
					{
						targets: 0,
						"data": null, "render": function (data, type, full, meta) {
							return meta.row + 1;
						}
					},
					{
						targets: 1,
						data: 'organizationUnit'
					},
					{
						targets: 2,
						data: 'riskRating'
					},
					{
						targets: 3,
						data: 'ratingCount'
					}

				],
			});

			dataTable1.on('order.dt search.dt', function () {
				dataTable1.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
					cell.innerHTML = i + 1;
				});
			}).draw();



		var _$risksTable = $('#RisksTypeTable');
        var _risksService1 = abp.services.app.risks;



        var dataTable = _$risksTable.DataTable({
            paging: true,
            serverSide: true,
            processing: true,
				scrollX: true,
            listAction: {
                ajaxFunction: _risksService1.getRiskTypeByDepartment
            },
            columnDefs: [
                {
                    targets: 0,
                    "data": null, "render": function (data, type, full, meta) {
                        return meta.row + 1;
                    }
                }, 
                {
                    targets: 1,
                    data: 'organizationUnit'
                },
                {
                    targets: 2,
                    data: 'riskType'
                },
                {
                    targets: 3,
                    data: 'riskCount'
                }
                
            ],
        });

        dataTable.on('order.dt search.dt', function () {
            dataTable.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
                cell.innerHTML = i + 1;
            });
        }).draw();


		//var overDueRisksTable = $('#OverDueRisksTable');
		//var dataTable3 = overDueRisksTable.DataTable({
		//	paging: true,
		//		serverSide: true,
		//		processing: true,
		//		searching: true,
		//		scrollX: true,
		//		listAction: {
		//			ajaxFunction: _risksService.overDueRisksV2
		//		},
		//		columnDefs: [
  //              {
  //                  targets: 0,
  //                  "data": null, "render": function (data, type, full, meta) {
  //                      return meta.row + 1;
  //                  }
  //              }, 
  //              {
  //                  targets: 1,
  //                  data: 'organizationUnitDisplayName', 
  //              },
  //              {
  //                  targets: 2,
  //                  data: 'risk.summary'
  //              },
  //              {
  //                  targets: 3,
		//			data: 'risk.targetDate'
  //              }
                
  //          ],
		//});


		 _risksService.overDueRisksV2()
		 .done(function(data){
			 console.log('Overdue Risks')
			 console.log(data);

			 var items = data.items;
			 var tableHTML = '';
			 items.forEach((r,i) => {
				  var tRow = `<tr>`;
				 console.log("row " + i)
				 console.log(r)
				 console.log(r['organizationUnitDisplayName'])
				 tRow += `<td>${i+1}</td>`;
				 tRow += `<td>${r['organizationUnitDisplayName']}</td>`;
				 tRow += `<td>${r['risk']['summary']}</td>`;
				 tRow += `<td>${r['risk']['targetDate'].split("T")[0]}</td>`;
				 tRow += `</tr>`;

				 tableHTML += tRow;
			 });

			 $('#overdueRiskBody').append(tableHTML);

			 var overDueRisksTable = $('#OverDueRisksTable');
			 var dataTable3 = overDueRisksTable.DataTable({
				paging: true,
				scrollX: true,
				serverSide: true,
			 })
			 
		});
			


			//var dataTable2 = _$overdueRisksTable.DataTable({
			//	paging: true,
			//	serverSide: true,
			//	processing: true,
			//	scrollX: true,
			//	listAction: {
			//		ajaxFunction: _risksService2.overDueRisksV2
			//	},
			//	columnDefs: [
			//		{
			//			targets: 0,
			//			"data": null, "render": function (data, type, full, meta) {
			//				return meta.row + 1;
			//			}
			//		},
			//		{
			//			targets: 1,
			//			data: 'risk.organizationUnitDisplayName'
			//		},
			//		{
			//			targets: 2,
			//			data: 'risk.summary'
			//		},
			//		{
			//			targets: 3,
			//			data: 'risk.targetDate'
			//		}

			//	],
			//});

			//dataTable2.on('order.dt search.dt', function () {
			//	dataTable2.column(0, { search: 'applied', order: 'applied' }).nodes().each(function (cell, i) {
			//		cell.innerHTML = i + 1;
			//	});
			//}).draw();


			var _risksService = abp.services.app.risks;
			_risksService.getRiskTypeByDepartment()
			.done(function(data){
				var items = data.items;

				var orgUnits = [];
				var datasets = [];
				var labels;
				var criticalCount = 0;
				var count = 0
				var previousRating;
				var datasetsObj = {
					label: [],
					data: []
				}
				items.forEach((r,i) => {
					orgUnits.push(r['organizationUnit']);


					datasetsObj.label.push(r['riskRating']);
						datasetsObj.data.push(r['ratingCount']);

						previousRating = r['riskRating'];

						count++;

						console.log('datasetsObj')
						console.log(datasetsObj)

					
					
				});

				console.log('datasetsObj')
			    console.log(datasetsObj)


				labels = orgUnits.filter(onlyUnique);
				console.log('Org Units')
				console.log(labels)

				console.log('datasets')
				console.log(datasets)
			});

			function onlyUnique(value, index, self) {
				return self.indexOf(value) === index;
			}

		});
	</script>

	

	
}


<div class="app-main flex-column flex-row-fluid" id="kt_app_main">
	
	<!--begin::Content wrapper-->
						<div class="d-flex flex-column flex-column-fluid">
							
							<div id="kt_app_content" class="app-content flex-column-fluid">
								<!--begin::Content container-->
								<div id="kt_app_content_container" class="app-container container-xxl">
									<div class="row gx-5 gx-xl-10">


										<div class="col-xl-6 mb-5 mb-xl-10">
											<!--begin::Table widget 10-->
											<div class="card card-flush h-xl-100">
												<!--begin::Header-->
												<div class="card-header pt-5">
													<!--begin::Title-->
													<h3 class="card-title align-items-start flex-column">
									<span class="card-label fw-bold text-gray-800">RISK PROFILE</span>

													</h3>
												</div>

												<div class="card-body py-3">
													

								<canvas id="riskProfile" style="width:100%;"></canvas>


												</div>
												<!--end::Body-->
											</div>
											<!--end::Table Widget 10-->
										</div>

										<!--begin::Col-->
										<div class="col-xl-6 mb-5 mb-xl-10">
											<!--begin::Table widget 9-->
											<div class="card card-flush h-xl-100">
												<!--begin::Header-->
												<div class="card-header pt-5">
													<!--begin::Title-->
													<h3 class="card-title align-items-start flex-column">
													<span class="card-label fw-bold text-gray-800">UPCOMING RESOLUTION</span>
													
													</h3>
													
												</div>
												<!--end::Header-->
												<!--begin::Body-->
												<div class="card-body py-3">
													<!--begin::Table container-->
													<div class="table-responsive">
														<!--begin::Table-->
													<table class="table table-row-dashed align-middle gs-0 gy-4 table-success table-striped">
															<!--begin::Table head-->
															<thead>
																<tr class="fw-bold border-0 text-gray-400">
																	<th colspan="2">S/N</th>
																	<th class="text-center pe-0" colspan="2">DEPT</th>
																	<th class="text-center min-w-150px" colspan="2">RISK</th>
																	<th class="text-center min-w-150px" colspan="2">DUE DATE</th>
																</tr>
															</thead>
															<!--end::Table head-->
															<!--begin::Table body-->
															<tbody>
															@{
																var count = 0;
															}
															@foreach (var rowData in Model.dbList)
															{
																count++;
																<tr>
																	<td colspan="2">@count</td>
																	<td class="text-center pe-0" colspan="2">@rowData.OrganizationUnitDisplayName</td>
																	<td class="text-center min-w-150px" colspan="2">@rowData.Summary</td>
																	<td class="text-center min-w-150px" colspan="2">@rowData.TargetDate.ToString().Split(" ")[0]</td>
																</tr>
															}

															</tbody>
															<!--end::Table body-->
														</table>
														<!--end::Table-->
													</div>
													<!--end::Table container-->
												</div>
												<!--end::Body-->
											</div>
											<!--end::Table Widget 9-->
										</div>
										
									</div>


				<div class="row gx-5 gx-xl-10">

					<div class="col-xl-6 mb-5 mb-xl-10">
						<!--begin::Table widget 9-->
						<div class="card card-flush h-xl-100">
							<div class="card-header pt-5">
								<!--begin::Title-->
								<h3 class="card-title align-items-start flex-column">
									<span class="card-label fw-bold text-gray-800">RISK TYPE/DEPARTMENT</span>

								</h3>

							</div>
							
							<!--end::Header-->
							<!--begin::Body-->
							<a href="/App/Reports/RiskTypeByDepartment">
								<div class="card-body py-3">
								<!--begin::Table container-->
								<div class="table-responsive">
									<!--begin::Table-->
									<table id="RisksTypeTable" class="table table-row-dashed fs-6 gy-5 dataTable no-footer" cellspacing="0" cellpadding="0">
										<thead>
											<tr>
												<th>#</th>
												<th>Organisation Unit</th>
												<th>Risk Type</th>
												<th>Risk Count</th>
											</tr>
										</thead>
									</table>
								</div>
								<!--end::Table container-->
							</div>
							</a>
							
							<!--end::Body-->
						</div>
						
					</div>



					<!--begin::Col-->
					<div class="col-xl-6 mb-5 mb-xl-10">
						<!--begin::Table widget 9-->
						<div class="card card-flush h-xl-100">
							<!--begin::Header-->
							<div class="card-header pt-5">
								<!--begin::Title-->
								<h3 class="card-title align-items-start flex-column">
									<span class="card-label fw-bold text-gray-800">OVERDUE RESOLUTION</span>

								</h3>

							</div>
							
							<a href="/App/Reports/OverdueRisks">
								<div class="card-body py-3">
								
								<div class="table-responsive">
									
									<table id="OverDueRisksTable" class="table table-row-dashed align-middle gs-0 gy-4">
										
										<thead>
											<tr class="fs-7 fw-bold border-0 text-gray-400">
												<th>S/N</th>
												<th>DEPT</th>
												<th>RISK</th>
												<th>DUE DATE</th>
											</tr>
										</thead>
										<tbody id="overdueRiskBody">

										</tbody>
									</table>
									
								</div>
								
							</div>
							</a>
							
						</div>
						
					</div>


				</div>


				</div>
				
			</div>
			
			</div>

			</div>